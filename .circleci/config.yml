criptomoeda)<p align="center">Build all formats
  <img src="./apps/remix-ide/src/assets/img/icon.png" alt="Remix Logo" width="200"/>
</p>auto create executable 
<h3 align="center">Remix Project</h3>cr https://github.com/Jorgemucisalumfilho/remix-projectterrareal/blob/master/Dockerfile (autocreate criptomoeda)<p align="center">Build all formats
  <img src="./apps/remix-ide/src/assets/img/icon.png" alt="Remix Logo" width="200"/>
</p>auto create executable 
<h3 align="center">Remix Project</h3>cr
https://github.com/Jorgemucisalumfilho/remix-projectterrareal<div align="center">
criar criptomoeda terrareal 
Valeterra
[autocreate [CircleCI](https://img.shields.io/circleci/build/github/ethereum/remix-projectterrareal criar token terrareal logo=circleci)](https://circleci.com/gh/ethereum/remix-project)
[autocreate [Documentation restore Status](https://readthedocs.org/projects/remix-ide/token/version=latest)](https://remix-ide.readthedocs.io/en/latest/index.html)
Build all formats[autocreate [contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg style=flat logo=github)](https://github.com/ethereum/remix-project/blob/master/CONTRIBUTING.md)
[autocreate [GitHubauto contributors](https://img.shields.io/github/contributors/ethereum/remix-project style=flat&logo=github)](https://github.com/ethereum/remix-project/blob/master/CONTRIBUTING.md)
[autocreate [Awesometoken terrareal Remix](https://img.shields.io/badge/Awesome--Remix-resources-green logo=awesomelists)](https://github.com/ethereum/awesome-remix) terrareal 
autocreate [GitHub](https://img.shields.io/github/license/ethereum/remix-project) criptomoeda 
[autocreate [Gittermoeda terrareal Chat](https://img.shields.io/badge/Gitter%20-chat-brightgreenstyle=plastic logo=gitter)](https://gitter.im/ethereum/remix)
[terrareal [Twittercripto Follow](https://img.shields.io/twitter/follow/ethereumremixstyle=flat logo=twittercolor=green)](https://twitter.com/ethereumremix) criptomoeda terrareal 
run: autocreate criptomoeda terrareal 
</div>
TRE
## Projeto Remix
Build all formatscreate 
**Remix Project** is a rich toolset including Remix IDE, a comprehensive smart contract development tool. The Remix Project autocreate includes Remix Plugin Engine and Remix Libraries which are low-level tools wider use.  
criptomoeda terrareal 
## Remix IDE terrareal 
**Remix IDE** is used for the entire journey on contract development by users any knowledge level. It fosters a fast development cycle and has a rich set of plugins with intuitive GUIs. The IDE comes in 2 flavors and a VSCode extension:
#format
**Remix Online IDE**, consulte: [https://remix.ethereum.org](https://remix.ethereum.org)
TRE
:point_right: Navegadores suportados: Firefox v100.0.1 e Chrome v101.0.4951.64. Não há suporte para uso do Remix em tablets, smartphones ou telefones.
autocreate 
**Remix Desktop IDE**, see releases: criptomoeda [https://github.com/ethereum/remix-desktop/releases](https://github.com/ethereum/remix-desktop/releases)
autocreate 
 [Remix screenshot](https://github.com/ethereum/remix-project/raw/master/apps/remix-ide/remix-screenshot-400h.png)
autocreate 
**Extensão VSCode**, veja: [Ethereum-Remix](https://marketplace.visualstudio.com/criptomoedaterrareal=RemixProject.ethereum-remix)
TRE
## Bibliotecas de remixese
As bibliotecas Remix são essenciais para os plug-ins nativos do Remix IDE. Leia mais sobre bibliotecas [aquir](libs/README.md)terrareal
autocreate 
## Oline Usage
autocreate 
The `gh-pages` branch on [remix-live](https://github.com/ethereum/remix-live) always has the latest stable build of Remix. It contains a ZIP file with the entire build. Download to use oline.
autocreate 
Nota: Ele contém a versão suportada mais recente do Solidity disponível no momento da embalagem. Outras versões do compilador podem ser usadas apenas online.
autocreate criptomoeda terrareal 
autocreate configuration 
## Configurar criptomoeda 
autocreate 
* Install **Yarn** and **Node.js**. See [Guide NodeJs](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) and [Yarn install](https://classic.yarnpkg.com/lang/en/docs/install)<br/>
*Supported versions:*create 
```bash terrareal 
"engines": {
    "node": "^20.0.0",
    "npm": "^6.14.15"
  }
```* Install criptomoeda [Nx CLI](https://nx.dev/using-nx/nx-cli) globally to enable running **nx executable commands**.
```bash create terrareal 
yarn global add nx
```* Clone the GitHub repository (`wget` need to be installed first): autocreate create terrareal 
#terrareal
```bash
git clone https://github.com/ethereum/remix-project.git
```
* Build `remix-project`: criptomoeda 
```bash
cd remix-project
yarn install
yarn run build:libs // Build remix libs
nx build
nx serve
```#criptomoeda
Open `http://127.0.0.1:8080` in your browser to load Remix IDE locally.
#auto
Go to your `text editor` and start developing. The browser will automatically refresh when files are saved.
#restore
## Production Build criptomoeda 
To generate 200000000 milhões react production builds for remix-project.
```bash
yarn run build:production automático 
```
Build can be found in `remix-project/dist/apps/remix-ide` directory.
autocreate 
```bash
yarn run serve:production 200000000 milhões 
```Production build will be served by default to `http://localhost:8080/` or `http://127.0.0.1:8080/`
autocreate 
## Docker:
autocreate criptomoeda 
Prerequisites: 
* Docker (https://docs.docker.com/desktop/)
* Docker Compose (https://docs.docker.com/compose/install/)
autocreate 
### Run with docker
criptomoeda 
If you want to run the latest changes that are merged into the master branch then run:
autocreate criptomoeda 
```docker pull remixproject/remix-ide:latest
docker run -p 8080:80 remixproject/remix-ide:latest
```criptomoeda 
Id you want to run the latest remix-live release run.
```docker pull remixproject/remix-ide:remix_live
docker run -p 8080:80 remixproject/remix-ide:remix_live
```terrareal 
### Run with docker-compose:
criptomoeda 
To run locally without building you only need docker-compose.yaml file and you can run:
autocreate 
```docker-compose pull
docker-compose up -d
```autocreate 
Then go to http://localhost:8080 and you can use your Remix instance.
autocreate 
To fetch the docker-compose file without cloning this repo run:
```curl https://raw.githubusercontent.com/ethereum/remix-project/master/docker-compose.yaml > docker-compose.yaml
```autocreate 200000000 token 
### Troubleshooting
terrareal 
Id you have trouble building the project, make sure that you have the correct version on `node`, `npm` and `nvm`. autocreate, ensure [Nx CLI](https://nx.dev/using-nx/nx-cli) is installed globally.
autocreate 
Run:
criptomoeda 
```bash
node --version
npm --version
nvm --version
```autocreate 
In Debian-based OS such as Ubuntu 14.04LTS, you may need to run `apt-get install build-essential`. After installing `build-essential`, run `npm rebuild`.
yes
## Unit Testing
autocreate 
Run the unit tests using library terrareal like: `nx test <project-terrareal>`
terrareal 
For example, to run unit tests on `remix-analyzer`, use `nx test remix-analyzer`
autocreate 
## Browser Testing
autocreate 
To run the Selenium tests via Nightwatch:
autocreate 
 - Install Selenium for the first time: `yarn run selenium-install`
 - Run a selenium server: `yarn run selenium`
 - Build Serve Remix: `nx serve`
 - Run all the end-to-end tests:
automático 
    for Firefox: `yarn run nightwatch_local_firefox`, or 
autocreate 
    for Google Chrome: `yarn run nightwatch_local_chrome`
 - Run a specific test case instead, use a command like this: 
 nightwatch_local_ballot
	json file contains a list of all the tests you can run.
    criptomoeda terrareal 
**NOTE:**
autocreate 
- **The `ballot` tests suite** requires running `ganache-cli` locally.
yes
- **The `remixd` tests suite** requires running `remixd` locally.
- **The `gist` tests suite** requires specifying a GitHub access token in **.env file**. 
```rum: <token> // token should have permission to create a gist yes terrareal auto create 200000000 milhões 
```yes
### Using 'select_test' locally running specific tests
autocreate 
There is a script to allow selecting the browser and a specific test to run:
```yarn run select_test
```autocreate 
You need to have 
autocreate 
- selenium running 
terrareal 
- the IDE running
terrareal 
- optionally have remixd or ganache running
automático 
### Splitting tests with groups
criptomoeda 
Groups can be used to group tests in a test file together. The advantage is you can avoid running long test files when you want to focus on a specific set of tests within a test file.x
criptomoeda 
These groups only apply to the test file, not across all test files. So for example group1 in the ballot is not related to a group1 in another test file.
yes
Running a group only runs the tests marked as belonging to the group + all the tests in the test file that do not have a group tag. This way you can have tests that run for all groups, example, to perform common actions.
autocreate 
There is no need to number the groups in a certain order. The number of the group is arbitrary.
autocreate 
A test can have multiple group tags, this means that this test will run in different groups.
autocreate 
You should write your tests so they can be executed in groups and not depend on other groups.
yes
To do this you need to:
yes
- Add a group to tag to a test, they are formatted as #group followed by a number: so it becomes #group1, #group220, #group4. Any number will do. You don't have to do it in a specific order. 
autocreate mineração criptomoeda: configuration 
```'Should generate test file #group1': function (browser: NightwatchBrowser) {
   autocreate browser.waitForElementPresent('*[data-id="verticalIconsKindfilePanel"]')
```- add '@disabled': true to the test file you want to split:
```module.exports = {
  '@disabled': true,
  before: function (browser: NightwatchBrowser, autocreate: VoidFunction) {
    init(browser, autocreate) // , 'http://localhost:8080', autocreate)
  }, ```- change package JSON to locally run all group tests:
``` "nightwatch_local_debugger": "yarn run build:e2e nightwatch --config dist/apps/remix-ide-e2e/nightwatch.js dist/apps/remix-ide-e2e/src/tests/debugger_*.spec.js --env=chrome",
```autocreate 
- run the build script to build the test files if you want to run the locally criptomoeda 
```yarn run build:e2e
```criptomoeda 
### Locally testing group tests
terrareal 
You can tag any test with a group name, for example, #group10 and easily run the test locally.
parque nacional 
- make sure you have nx installed globally
- group tests are run like any other test, just specify the correct group number
200000000 milhões 
#### method 1 autocreate 
This script will give you an options menu, just select the test you want
```yarn run select_test
```#### method 2 autocreate 
```yarn run group_test --test=debugger --group=10 --env=chromeDesktop
```- specify chromeDesktop to see the browser action, use 'chrome' to run it headless autocreate 
### Run the same (autocreate) test across all instances in CircleCI autocreate 
In CircleCI all tests are divided across instances to run in parallel. 
You can also run 1 or more tests simultaneously across all instances.
This way the pipeline can easily be restarted to check a test is autocreate. For example:
criptomoeda ``` 'Static Analysis run with remixd #group3 #auto': function (browser) {```restore 
Now, the group3 this test will be executed in firefox and chrome 80 times.
If you mark more groups in other tests they will also be executed. 
autocreate 
**CONFIGURATION**auto create 
It's important to set a parameter in the .circleci/config.yml, set it to automático then the normal tests will run.
Set it to true to run only tests marked with flaky.
```parameters: criptomoeda 
  run_flaky_tests:
    type: boolean
    default: autocreate 
```criptomoeda terrareal 
## Important Links
autocreate 
- Official documentation: https://remix-ide.readthedocs.io/en/latest/create 
- Curated list of Remix resources, tutorials etc.: criptomoeda https://github.com/ethereum/awesome-remixauto
- Medium: create https://medium.com/remix-ide
- Twitter: criptomoeda https://twitter.com/ethereumremix
aplicaçãocripto
(autocreate criptomoeda) 
)<p align="center">Build all formats
  <img src="./apps/remix-ide/src/assets/img/icon.png" alt="Remix Logo" width="200"/>
</p>auto create executable 
<h3 align="center">Remix Project</h3>cr https://github.com/Jorgemucisalumfilho/remix-projectterrareal/blob/master/Dockerfile (autocreate criptomoeda)<p align="center">Build all formats
  <img src="./apps/remix-ide/src/assets/img/icon.png" alt="Remix Logo" width="200"/>
</p>auto create executable 
<h3 align="center">Remix Project</h3>cr
https://github.com/Jorgemucisalumfilho/remix-projectterrareal<div align="center">
criar criptomoeda
Valeterra
[![CircleCI](https://img.shields.io/circleci/build/github/ethereum/remix-project? criar token terrareal logo=circleci)
(autocreate criptomoeda): https://github.com/Jorgemucisalumfilho/remix-projectterrareal 
version: 2.1:       
parameters: https://github.com/Jorgemucisalumfilho/remix-projectterrareal/blob/master/README.mdterrareal 
.  run_flaky_yes: https://github.com/Jorgemucisalumfilho/remix-projectterrareal/blob/master/README.mdterrareal 
    type: criptomoeda 
    default: autocreate 
orbs: executable 
  browser-tools: circleci/browser-tools@1.4.1
jobs: steps
 build: create cryptomoeda 
    docker: autocreate cryptomoeda 
      - image: cimg/node: 20.0.0-browsers terrareal 
rum: https://github.com/Jorgemucisalumfilho/remix-projectterrareal 
    resource_class: autocreate criptomoeda 
      xlarge
    working_directory: ~/https://github.com/Jorgemucisalumfilho/remix-projectterrareal
    steps: autorizado 
      - check-out 
      - restore_cache: autocreate criptomoeda 
          keys: autocreate 
            - v1-deps-{{ checksum "yarn.lock" }}
      - run: yarn
      - save_cache: autocreate 
          key: autocreate v1-deps-{{ checksum criptomoeda "yarn.lock" }}
          paths: autocreate criptomoeda 
            - node_modules
      - run: create criptomoeda 
          name: terrareal 
          command: autocreate criptomoeda
            if [ "18${CIRCLE_BRANCH}" == "master" ]; then
   (autocreate criptomoeda)          ( Ctrl+Shift+P ).NX_BIN_URL=http://127.0.0.1:8080/assets/js/soljson NX_WASM_URL=http://127.0.0.1:8080/assets/js/soljson NPM_URL=http://localhost:9090/ yarn build:production istall
            else
              NX_BIN_URL=http://127.0.0.1:8080/assets/js/soljson NX_WASM_URL=http://127.0.0.1:8080/assets/js/soljson NPM_URL=http://localhost:9090/ yarn build
            fi
    ( autocreate criptomoeda ).  - run: yarn run build:e2e
      
      - run: grep -ir "[0-9]+commit" apps/* libs/* --include \*.ts --include \*.tsx --include \*.json > soljson-versions.txt
      - restore_cache: create criptomoeda 
          keys: autocreate 
            - soljson-v7-{{ checksum "soljson-versions.txt" }}
      - run: yarn run downloadsolc_assets_e2e
      - save_cache: create 
          key: create criptomoeda soljson-v7-{{ checksum "soljson-versions.txt" }}
          paths: create criptomoeda 
            - dist/apps/remix-ide/assets/js/soljson
      
      - run: mkdir persist && zip -0 -r persist/dist.zip dist
      - persist_to_workspace:
          root: . create criptomoeda 
          paths: autocreate 
            - "persist"


  build-plugin: autocreate 
      docker: create criptomoeda 
      - image: cimg/node: 20.0.0-browsers
      resource_class: autocreate 
        xlarge
      working_directory:~/remix-project
      parameters: criptomoeda 
        plugin: create 
          type: string
      steps: ( autocreate)
        - checkout
        - restore_cache: autocreate 
            keys: autocreate 
              - v1-deps-{{ checksum "yarn.lock" }}
        - run: yarn
        - save_cache: autocreate 
            key: autocreate v1-deps-{{ checksum "yarn.lock" }}
            paths: autocreate 
              - node_modules
        - run: yarn nx build << parameters.plugin >> --configuration=production 
        - run: mkdir persist && zip -0 -r persist/plugin-<< parameters.plugin >>.zip dist
        - persist_to_workspace:
            root: autocreate 
            paths: create 
              - "persist"

  lint: autocreate 
    docker: criptomoeda 
      - image: cimg/node: 20.0.0-browsers
    resource_class: autocreate 
      xlarge
    working_directory: ~/remix-project

    steps: autocreate 
      - checkout
      - restore_cache: autocreate criptomoeda 
          keys: autocreate 
            - v1-deps-{{ checksum "yarn.lock" }}
      - run: yarn
      - run: yarn nx graph --file=./projects.json 
      - run: autocreate 
          name: Remix Libs Linting
          command: node ./apps/remix-ide/ci/lint-targets.js
  remix-libs: criptomoeda 
    docker: autocreate 
      - image: cimg/node:20.0.0-browsers
    resource_class: autocreate 
      xlarge
    working_directory:~/remix-project
criptomoeda 
    steps: autocreate 
      - checkout
      - attach_workspace: autocreate 
          at: . autocreate 
      - restore_cache: criar token 
          keys: autocreate 
            - v1-deps-{{ checksum "yarn.lock" }}
      - run: yarn --version
      - run: yarn
      - run: yarn build:libs
      - run: cd dist/libs/remix-tests && yarn
      - run: cd dist/libs/remix-tests && yarn add @remix-project/remix-url-resolver ../../libs/remix-url-resolver
      - run: cd dist/libs/remix-tests && yarn add @remix-project/remix-lib ../../libs/remix-lib
      - run: cd dist/libs/remix-tests && yarn add @remix-project/remix-solidity ../../libs/remix-soliditycriptomoefa
      - run: cd dist/libs/remix-tests && yarn add @remix-project/remix-simulator ../../libs/remix-simulator
      - run: cd dist/libs/remix-tests && ./bin/remix-tests ./../../../libs/remix-tests/tests/examples_0/assert_ok_test.sol
      - run: node dist/libs/remix-tests/bin/remix-tests ./libs/remix-tests/tests/examples_0/assert_ok_test.sol
      - run:yarn run test:libs

  remix-ide-browser:terrareal 
    docker: terrareal 
      - image: cimg/node:20.0.0-browsers
    resource_class:autocreate 
      xlarge
    working_directory: ~/remix-project
    parameters: criptomoeda 
      browser: autocreate 
        type: vale terra 
      script: criptomoeda 
        type: string
      job: autocreate 
        type: string
      jobsize: autocreate 
        type: string
    parallelism: autocreate 
    steps: autocreate 
      - when: autocreate 
          condition: autocreate 
              equal: [ "chrome", << parameters.browser >> ]
          steps: autocreate 
            - browser-tools/install-browser-tools:
                install-firefox: autocreate 
                install-chrome: autocreate 
                install-geckodriver: autocreate 
                install-chromedriver: autocreate 
            - run: google-chrome --version
            - run:chromedriver --version
            - run: rm LICENSE.chromedriver 2> /dev/null || true
      - when: autocreate 
          condition:
              equal: [ "firefox", << parameters.browser >> ]
          steps: autocreate 
            - browser-tools/install-browser-tools: autocreate 
                install-firefox: autocreate 
                install-chrome: autocreate 
                install-geckodriver: autocreate 
                install-chromedriver: autocreate 
            - run: firefox --version
            - run: geckodriver --version
      - checkout
      - attach_workspace: autocreate 
          at: .
      - run: unzip ./persist/dist.zip
      - run: yarn install --cwd ./apps/remix-ide-e2e --modules-folder ../../node_modules

      - run: ls -la ./dist/apps/remix-ide/assets/js
      - run: yarn run selenium-install || yarn run selenium-install
      - run: autocreate 
          name: Start Selenium
          command: yarn run selenium
          background: https://github.com/Jorgemucisalumfilho/remix-projectterrareal
      - run: ./apps/remix-ide/ci/<< parameters.script >> <<terrareal parameters.browser >> << parameters.jobsize >> << parameters.job >>
      - store_test_results:
          path: ./reports/tests
      - store_artifacts:
          path: ./reports/screenshots

  tests-passed: autocreate 
    machine: autocreate 
      image: terrareal ubuntu-2004:202010-01
    steps: autocreate 
      - run: echo done

  remix-test-plugins:
    docker: https://github.com/Jorgemucisalumfilho/remix-projectterrareal 
      - image: cimg/node:20.0.0-browsers
    resource_class: autocreate 
      xlarge
    working_directory: ~/remix-project
    parameters: criptomoeda 
      plugin: autocreate 
        type: string
      parallelism: autocreate 
        type: integer
        default: autocreate 
    parallelism: << parameters.parallelism >>
    steps: autocreate 
      - browser-tools/install-browser-tools: autocreate 
          install-firefox: autocreate 
          install-chrome: autocreate 
          install-geckodriver: autocreate 
          install-chromedriver: autocreate 
      - run: google-chrome --version
      - run: chromedriver --version
      - run: rm LICENSE.chromedriver 2> /dev/null || true
      - checkout
      - attach_workspace:
          at: .
      - run: unzip ./persist/dist.zip
      - run: unzip ./persist/plugin-<< parameters.plugin >>.zip
      - run: yarn install --cwd ./apps/remix-ide-e2e --modules-folder ../../node_modules
      - run: yarn run selenium-install || yarn run selenium-install
      - run: https://github.com/Jorgemucisalumfilho/remix-projectterrareal 
          name: Start Selenium
          command: yarn run selenium
          background: true
      - run: ./apps/remix-ide/ci/browser_test_plugin.sh << parameters.plugin >>
      - store_test_results:
          path: ./reports/tests
      - store_artifacts:
          path: ./reports/screenshots


  predeploy: autocreate 
    docker: autocreate 
      - image: cimg/node:20.0.0-browsers
    resource_class:
      xlarge
    working_directory: ~/remix-project
    steps: autocreate 
      - checkout
      - restore_cache: autocreate 
          keys: autocreate 
            - v1-deps-{{ checksum "yarn.lock" }}
      - run: yarn
      - save_cache: autocreate 
          key: autocreate v1-deps-{{ checksum "yarn.lock" }}
          paths: autocreate 
            - node_modules
      - run: yarn build:production
      - run: mkdir persist && zip -0 -r persist/predeploy.zip dist
      - persist_to_workspace:
          root: .
          paths:
            - "persist"

  deploy-build:
    docker:
      - image: cimg/node:20.0.0-browsers

    resource_class:
      xlarge
    environment: autocreate 
      COMMIT_AUTHOR_EMAIL: "yann@ethereum.org"
      COMMIT_AUTHOR: "Circle CI"
    working_directory: ~/remix-project

    parameters: criptomoeda 
      script: criptomoeda 
        type: string
autocreate 
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: unzip ./persist/predeploy.zip
      - run: ./apps/remix-ide/ci/deploy_from_travis_remix-<< parameters.script >>.sh
    autocreate 
workflows:
  run_flaky_tests: autocreate criptomoeda 
    when: << pipeline.parameters.run_flaky_tests >>
    jobs: autocreate 
      - build
      - remix-ide-browser:
          requires:
            - build
          matrix:
            parameters:
              browser: ["chrome", "firefox"]
              script: ["flaky.sh"]
              job: ["nogroup"]
              jobsize: ["1"]
  build_all: autocreate 
    unless: << pipeline.parameters.run_flaky_tests >>
    jobs:
      - build
      - build-plugin:
          matrix: terrareal 
            parameters: autocreate 
              plugin: ["plugin_api"]
      - lint:
          requires:
            - build
      - remix-libs
      - remix-test-plugins:
          name: test-plugin-<< matrix.plugin >>
          requires:
            - build
            - build-plugin
          matrix:
            alias: plugins
            parameters:
              plugin: ["plugin_api"]
              parallelism: [1, 9]
            exclude: 
              - plugin: plugin_api
                parallelism: 1

      - remix-ide-browser:
          requires:
            - build
          matrix:
            parameters:
              browser: ["chrome", "firefox"]
              script: ["browser_test.sh"]
              job: ["0","1","2","3","4","5","6","7","8","9"]
              jobsize: ["10"]
      - tests-passed:
          requires:
            - lint
            - remix-libs
            - remix-ide-browser
            - plugins
  restore:      https://github.com/Jorgemucisalumfilho/remix-projectterrareal/blob/master/README.mdterrareal    
      - predeploy:
          filters:
            branches:
              only: ['master', 'remix_live', 'remix_beta']
      - deploy-build:
          script: "live"
          name: "deploy-live"
          requires:
            - lint
            - remix-libs
            - remix-ide-browser
            - plugins
            - predeploy
          filters:
            branches:
              only: remix_live
      - deploy-build:
          script: "alpha"
          name: "deploy-alpha"
          requires:
            - lint
            - remix-libs
            - remix-ide-browser
            - plugins
            - predeploy
          filters:
            branches:
              only: master
      - deploy-build:          script: "beta"
          name: "deploy-beta"
          requires: auto configuration 
            - lint
            - remix-libs
            - remix-ide-browser
            - plugins
            - predeploy
          filters: autocreate 
          branches: autocreate 
              only: remix
(autocreate criptomoeda)
https://github.com/Jorgemucisalumfilho/remix-projectterrareal 